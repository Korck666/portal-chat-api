# services/openai.py
from typing import Any

import openai
from utils.config import Config


class OpenAI():
    """
    Singleton class for interacting with the OpenAI API.
    """
    _instance = None

    def __new__(cls) -> "OpenAI":
        """
        Singleton implementation for class OpenAI.
        """
        if not cls._instance:
            cls._instance = super().__new__(cls)
            cls._instance._initialize()
        return cls._instance

    def _initialize(self) -> None:
        """
        Initializes OpenAI connection and collections.
        """
        self.config = Config()
        openai.api_key = self.config.OPENAI_API_KEY
        openai.organization = self.config.OPENAI_ORGANIZATION

    def chat(self, chat_model: str, chat_prep: str, chat_message: str, stream: bool = False) -> Any:
        """
        Calls the OpenAI API to generate a response based on a given model, preparation, and message.

        Args:
            chat_model (str): The OpenAI model to use for generating the response.
            chat_prep (str): The preparation message to send to OpenAI.
            chat_message (str): The user message to send to OpenAI.
            stream (bool): Whether to stream the response or not.

        Returns:
            Any: The response generated by OpenAI.
        """
        response: Any = openai.ChatCompletion.create(
            model=chat_model,
            messages=[
                {"role": "system", "content": chat_prep},
                {"role": "user", "content": chat_message},
            ], stream=stream)
        # response_message: str = response["choices"][0]["message"]["content"]
        if stream:
            yield response

        return response
